# Get the shape distribution of the training data set, for transfer learning

import sys
from PIL import Image
import numpy as np
import os, os.path
from os.path import isfile,join
import matplotlib.pyplot as plt
import math

file_dir = "/Users/wxwang/Desktop/DL/Kaggle_p1/im1.png"
file_dir2 = "/Users/wxwang/Desktop/DL/Kaggle_p1/stage1_train"
im = Image.open(file_dir)
#im.show()
pixels = im.load()
a,b = im.size
r = pixels[1,1]
print(pixels[1,1])
print(r[1])
print(len(os.listdir(file_dir2)))
width_rec = []
height_rec = []
mean_r_rec = []
std_r_rec = []
mean_g_rec = []
std_g_rec = []
mean_b_rec = []
std_b_rec = []


print(a,b)
count = 1
for i in os.listdir(file_dir2):
    file_dir3 = os.path.join(file_dir2,i,"Images")
    #print(file_dir3)
    file_dir4 = os.listdir(file_dir3)
    #print(file_dir4)
    im = Image.open(os.path.join(file_dir3,file_dir4[0]))
    pixels = im.load()
    data = np.asarray(im,dtype = "int32")
    width,height = im.size
    width_rec.append(width)
    height_rec.append(height)
    a,b = im.size
    temp_sum_r = 0
    temp_sums_r = 0
    temp_sum_g = 0
    temp_sums_g = 0
    temp_sum_b = 0
    temp_sums_b = 0
    print(count)
    count = count + 1
    for j in range(0,0):
        for k in range (0,0):
            temp_sum_r = temp_sum_r + pixels[j,k][0]
            temp_sum_g = temp_sum_r + pixels[j, k][1]
            temp_sum_b = temp_sum_r + pixels[j, k][2]
            temp_sums_r = temp_sum_r + pixels[j, k][0]**2
            temp_sums_g = temp_sum_r + pixels[j, k][1]**2
            temp_sums_b = temp_sum_r + pixels[j, k][2]**2
    #mean_r_rec.append(float(temp_sum_r)/(a*b))
    #mean_g_rec.append(float(temp_sum_r) / (a * b))
    #mean_b_rec.append(float(temp_sum_r) / (a * b))
    #std_r_rec.append((float(temp_sums_r)/(a*b) - (mean_r_rec[-1]**2)/(a*b))**(1.0/2))
    #std_g_rec.append((float(temp_sums_g) / (a * b) - (mean_g_rec[-1] ** 2)/(a*b))**(1.0/2))
    #std_b_rec.append((float(temp_sums_b) / (a * b) - (mean_b_rec[-1] ** 2)/(a*b))**(1.0/2))
    mean_r_rec.append(np.mean(data[:][:][0]))
    mean_g_rec.append(np.mean(data[:][:][1]))
    mean_b_rec.append(np.mean(data[:][:][2]))
    std_r_rec.append(np.std(data[:][:][0]))
    std_g_rec.append(np.std(data[:][:][1]))
    std_b_rec.append(np.std(data[:][:][2]))

plt.plot(mean_r_rec)
plt.show()
plt.plot(std_r_rec)
plt.show()
